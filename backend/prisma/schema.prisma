// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  Admin
  Customer
  Owner
}

enum PropertyStatus {
  Available
  Sold
  Pending
}

enum PropertyType{
  House
  Apartment
  Land
}

enum paymentMethod {
  CASH
  BANK_TRANSFER
  MOBILE_PAYMENT
}

enum paymentStatus {
  Pending
  Completed
  Failed
  Refunded
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Role @default(Customer)
  avatarUrl String? //Profile pic url
  avatarId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  property  Property[]  @relation("userproperties")
  favourite Favourite[]
  payment Payment[] @relation("userPayment")

  @@map("users")
}

model Property {
  id Int @default(autoincrement()) @id
  title String
  description String?
  price Float
  address String
  status PropertyStatus
  type PropertyType
  ownerId  Int 
  owner User  @relation("userproperties", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  images PropertyImage[]
  favourite Favourite[]
  payment Payment[] @relation("propertyPayment")

  @@map("properties")
}

model PropertyImage {
  id Int @default(autoincrement()) @id
  url String
  publicId  String?
  propertyId Int
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Favourite {
  id Int @id @default(autoincrement())
  userId Int
  propertyId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("Favourites")
}

model Payment {
  id Int @id
  amount Float
  currency String @default("Rs")
  method paymentMethod 
  status paymentStatus @default(Pending)
  transactionId String?
  userId Int
  propertyId Int
  user User @relation("userPayment", fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation("propertyPayment", fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt

  @@map("payment")
}
